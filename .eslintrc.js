module.exports = {
  plugins: ['@typescript-eslint', 'import', 'unicorn', '@tanstack/query', 'sonarjs'],
  extends: [
    'plugin:prettier/recommended',
    'plugin:@typescript-eslint/recommended-type-checked',
    'plugin:@tanstack/eslint-plugin-query/recommended',
    'plugin:sonarjs/recommended-legacy',
  ],
  parser: '@typescript-eslint/parser',
  ignorePatterns: ['schema.ts', 'node_modules'],
  overrides: [
    {
      files: ['*.ts', '*.tsx'],
      parserOptions: {
        tsconfigRootDir: __dirname,
        project: './tsconfig.json',
      },
    },
  ],
  rules: {
    '@typescript-eslint/await-thenable': 'error',
    '@typescript-eslint/ban-ts-comment': 'error',
    '@typescript-eslint/ban-types': 'off',
    '@typescript-eslint/consistent-type-definitions': ['error', 'type'],
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-empty-interface': 'off',
    '@typescript-eslint/no-empty-object-type': 'off',
    '@typescript-eslint/no-floating-promises': 'error',
    '@typescript-eslint/no-unsafe-assignment': 'off',
    '@typescript-eslint/no-unsafe-member-access': 'off',
    '@typescript-eslint/no-unsafe-return': 'off',
    '@typescript-eslint/no-unused-expressions': 'error',
    '@typescript-eslint/prefer-promise-reject-errors': 'off',
    '@typescript-eslint/restrict-template-expressions': 'off',
    'array-callback-return': 'error',
    'import/no-default-export': 'error',
    'max-len': ['error', { code: 140, ignoreStrings: true, ignoreTemplateLiterals: true }],
    'no-async-promise-executor': 'error',
    'no-await-in-loop': 'off',
    'no-console': 'error',
    'no-empty': 'off',
    'no-throw-literal': 'error',
    'no-unused-expressions': 'off',
    'no-use-before-define': ['error', { functions: false }],
    'object-shorthand': 'error',
    'require-await': 'error',
    'sonarjs/no-commented-code': 'off',
    'sonarjs/no-empty-test-file': 'off',
    'sonarjs/no-redundant-optional': 'off',
    'sonarjs/todo-tag': 'off',
    'unicorn/filename-case': ['error', { case: 'kebabCase' }],
    'padding-line-between-statements': [
      'error',
      { blankLine: 'always', prev: '*', next: 'block' },
      { blankLine: 'always', prev: '*', next: 'class' },
      { blankLine: 'always', prev: '*', next: 'function' },
      { blankLine: 'always', prev: 'multiline-expression', next: 'multiline-expression' },
    ],
  },
};
